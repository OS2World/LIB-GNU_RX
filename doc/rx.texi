\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename rx.info
@settitle Rx
@setchapternewpage odd
@c %**end of header

@c  This title page illustrates only one of the
@c  two methods of forming a title page.

@titlepage
@title Rx
@subtitle A Dynamic Automata Library
@author Tom Lord

@center with excerpts from @emph{The GNU C Library} reference manual
@center by Sandra Loosemore
@center with
@center Richard M. Stallman, Roland McGrath, and Andrew Oram

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995 Cygnus Support

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the author.

@end titlepage

@node Top, Posix Entry Points, (dir), (dir)
@top Rx

This document describes Rx.

This document applies to version "Rx-diSpencer"
of the library named librx.a

@menu
* Posix Entry Points::          The normal way to call regexp functions.
* Performance Considerations::  Special considerations when using Rx.
* Semantic Tests::              A test-suite for Posix matcher semantics.
* General Functions::           Rx's native entry points.
* Rx Theory::                   A quick tour of the implementation.
* Improvements to Make::        The Rx TODO list.
@end menu


@node Posix Entry Points, Performance Considerations, Top, Top
@section Regular Expression Matching

This section is excerpted from @emph{The GNU C Library} reference manual
by Sandra Loosemore with Richard M. Stallman, Roland McGrath, and Andrew
Oram.

The GNU C library supports the standard POSIX.2 interface.  Programs
using this interface should include the header file @file{rxposix.h}.

@menu
* POSIX Regexp Compilation::    Using @code{regcomp} to prepare to match.
* Flags for POSIX Regexps::     Syntax variations for @code{regcomp}.
* Matching POSIX Regexps::      Using @code{regexec} to match the compiled
				   pattern that you get from @code{regcomp}.
* Regexp Subexpressions::       Finding which parts of the string were matched.
* Subexpression Complications:: Find points of which parts were matched.
* Regexp Cleanup::		Freeing storage; reporting errors.
@end menu

@node POSIX Regexp Compilation
@subsection POSIX Regular Expression Compilation

Before you can actually match a regular expression, you must
@dfn{compile} it.  This is not true compilation---it produces a special
data structure, not machine instructions.  But it is like ordinary
compilation in that its purpose is to enable you to ``execute'' the
pattern fast.  (@xref{Matching POSIX Regexps}, for how to use the
compiled regular expression for matching.)

There is a special data type for compiled regular expressions:

@comment regex.h
@comment POSIX.2
@deftp {Data Type} regex_t
This type of object holds a compiled regular expression.
It is actually a structure.  It has just one field that your programs
should look at:

@table @code
@item re_nsub
This field holds the number of parenthetical subexpressions in the
regular expression that was compiled.
@end table

There are several other fields, but we don't describe them here, because
only the functions in the library should use them.
@end deftp

After you create a @code{regex_t} object, you can compile a regular
expression into it by calling @code{regcomp}.

@comment regex.h
@comment POSIX.2
@deftypefun int regcomp (regex_t *@var{compiled}, const char *@var{pattern}, int @var{cflags})
The function @code{regcomp} ``compiles'' a regular expression into a
data structure that you can use with @code{regexec} to match against a
string.  The compiled regular expression format is designed for
efficient matching.  @code{regcomp} stores it into @code{*@var{compiled}}.

It's up to you to allocate an object of type @code{regex_t} and pass its
address to @code{regcomp}.

The argument @var{cflags} lets you specify various options that control
the syntax and semantics of regular expressions.  @xref{Flags for POSIX
Regexps}.

If you use the flag @code{REG_NOSUB}, then @code{regcomp} omits from
the compiled regular expression the information necessary to record
how subexpressions actually match.  In this case, you might as well
pass @code{0} for the @var{matchptr} and @var{nmatch} arguments when
you call @code{regexec}.

If you don't use @code{REG_NOSUB}, then the compiled regular expression
does have the capacity to record how subexpressions match.  Also,
@code{regcomp} tells you how many subexpressions @var{pattern} has, by
storing the number in @code{@var{compiled}->re_nsub}.  You can use that
value to decide how long an array to allocate to hold information about
subexpression matches.

@code{regcomp} returns @code{0} if it succeeds in compiling the regular
expression; otherwise, it returns a nonzero error code (see the table
below).  You can use @code{regerror} to produce an error message string
describing the reason for a nonzero value; see @ref{Regexp Cleanup}.

@end deftypefun

Here are the possible nonzero values that @code{regcomp} can return:

@table @code
@comment regex.h
@comment POSIX.2
@item REG_BADBR
There was an invalid @samp{\@{@dots{}\@}} construct in the regular
expression.  A valid @samp{\@{@dots{}\@}} construct must contain either
a single number, or two numbers in increasing order separated by a
comma.

@comment regex.h
@comment POSIX.2
@item REG_BADPAT
There was a syntax error in the regular expression.

@comment regex.h
@comment POSIX.2
@item REG_BADRPT
A repetition operator such as @samp{?} or @samp{*} appeared in a bad
position (with no preceding subexpression to act on).

@comment regex.h
@comment POSIX.2
@item REG_ECOLLATE
The regular expression referred to an invalid collating element (one not
defined in the current locale for string collation).  

@comment regex.h
@comment POSIX.2
@item REG_ECTYPE
The regular expression referred to an invalid character class name.

@comment regex.h
@comment POSIX.2
@item REG_EESCAPE
The regular expression ended with @samp{\}.

@comment regex.h
@comment POSIX.2
@item REG_ESUBREG
There was an invalid number in the @samp{\@var{digit}} construct.

@comment regex.h
@comment POSIX.2
@item REG_EBRACK
There were unbalanced square brackets in the regular expression.

@comment regex.h
@comment POSIX.2
@item REG_EPAREN
An extended regular expression had unbalanced parentheses,
or a basic regular expression had unbalanced @samp{\(} and @samp{\)}.

@comment regex.h
@comment POSIX.2
@item REG_EBRACE
The regular expression had unbalanced @samp{\@{} and @samp{\@}}.

@comment regex.h
@comment POSIX.2
@item REG_ERANGE
One of the endpoints in a range expression was invalid.

@comment regex.h
@comment POSIX.2
@item REG_ESPACE
@code{regcomp} ran out of memory.
@end table

@node Flags for POSIX Regexps
@subsection Flags for POSIX Regular Expressions

These are the bit flags that you can use in the @var{cflags} operand when
compiling a regular expression with @code{regcomp}.
 
@table @code
@comment regex.h
@comment POSIX.2
@item REG_EXTENDED
Treat the pattern as an extended regular expression, rather than as a
basic regular expression.

@comment regex.h
@comment POSIX.2
@item REG_ICASE
Ignore case when matching letters.

@comment regex.h
@comment POSIX.2
@item REG_NOSUB
Don't bother storing the contents of the @var{matches-ptr} array.

@comment regex.h
@comment POSIX.2
@item REG_NEWLINE
Treat a newline in @var{string} as dividing @var{string} into multiple
lines, so that @samp{$} can match before the newline and @samp{^} can
match after.  Also, don't permit @samp{.} to match a newline, and don't
permit @samp{[^@dots{}]} to match a newline.

Otherwise, newline acts like any other ordinary character.
@end table

@node Matching POSIX Regexps
@subsection Matching a Compiled POSIX Regular Expression

Once you have compiled a regular expression, as described in @ref{POSIX
Regexp Compilation}, you can match it against strings using
@code{regexec}.  A match anywhere inside the string counts as success,
unless the regular expression contains anchor characters (@samp{^} or
@samp{$}).

@comment regex.h
@comment POSIX.2
@deftypefun int regexec (regex_t *@var{compiled}, char *@var{string}, size_t @var{nmatch}, regmatch_t @var{matchptr} @t{[]}, int @var{eflags})
This function tries to match the compiled regular expression
@code{*@var{compiled}} against @var{string}.

@code{regexec} returns @code{0} if the regular expression matches;
otherwise, it returns a nonzero value.  See the table below for
what nonzero values mean.  You can use @code{regerror} to produce an
error message string describing the reason for a nonzero value; 
see @ref{Regexp Cleanup}.

The argument @var{eflags} is a word of bit flags that enable various
options.

If you want to get information about what part of @var{string} actually
matched the regular expression or its subexpressions, use the arguments
@var{matchptr} and @var{nmatch}.  Otherwise, pass @code{0} for 
@var{nmatch}, and @code{NULL} for @var{matchptr}.  @xref{Regexp
Subexpressions}.
@end deftypefun

You must match the regular expression with the same set of current
locales that were in effect when you compiled the regular expression.

The function @code{regexec} accepts the following flags in the
@var{eflags} argument:

@table @code 
@comment regex.h
@comment POSIX.2
@item REG_NOTBOL
Do not regard the beginning of the specified string as the beginning of
a line; more generally, don't make any assumptions about what text might
precede it.

@comment regex.h
@comment POSIX.2
@item REG_NOTEOL
Do not regard the end of the specified string as the end of a line; more
generally, don't make any assumptions about what text might follow it.
@end table

Here are the possible nonzero values that @code{regexec} can return:

@table @code
@comment regex.h
@comment POSIX.2
@item REG_NOMATCH
The pattern didn't match the string.  This isn't really an error.

@comment regex.h
@comment POSIX.2
@item REG_ESPACE
@code{regexec} ran out of memory.
@end table

@node Regexp Subexpressions
@subsection Match Results with Subexpressions

When @code{regexec} matches parenthetical subexpressions of
@var{pattern}, it records which parts of @var{string} they match.  It
returns that information by storing the offsets into an array whose
elements are structures of type @code{regmatch_t}.  The first element of
the array (index @code{0}) records the part of the string that matched
the entire regular expression.  Each other element of the array records
the beginning and end of the part that matched a single parenthetical
subexpression.

@comment regex.h
@comment POSIX.2
@deftp {Data Type} regmatch_t
This is the data type of the @var{matcharray} array that you pass to
@code{regexec}.  It containes two structure fields, as follows:

@table @code
@item rm_so
The offset in @var{string} of the beginning of a substring.  Add this
value to @var{string} to get the address of that part.

@item rm_eo
The offset in @var{string} of the end of the substring.
@end table
@end deftp

@comment regex.h
@comment POSIX.2
@deftp {Data Type} regoff_t
@code{regoff_t} is an alias for another signed integer type.
The fields of @code{regmatch_t} have type @code{regoff_t}.
@end deftp

The @code{regmatch_t} elements correspond to subexpressions
positionally; the first element (index @code{1}) records where the first
subexpression matched, the second element records the second
subexpression, and so on.  The order of the subexpressions is the order
in which they begin.

When you call @code{regexec}, you specify how long the @var{matchptr}
array is, with the @var{nmatch} argument.  This tells @code{regexec} how
many elements to store.  If the actual regular expression has more than
@var{nmatch} subexpressions, then you won't get offset information about
the rest of them.  But this doesn't alter whether the pattern matches a
particular string or not.

If you don't want @code{regexec} to return any information about where
the subexpressions matched, you can either supply @code{0} for
@var{nmatch}, or use the flag @code{REG_NOSUB} when you compile the
pattern with @code{regcomp}.

@node Subexpression Complications
@subsection Complications in Subexpression Matching

Sometimes a subexpression matches a substring of no characters.  This
happens when @samp{f\(o*\)} matches the string @samp{fum}.  (It really
matches just the @samp{f}.)  In this case, both of the offsets identify
the point in the string where the null substring was found.  In this
example, the offsets are both @code{1}.

Sometimes the entire regular expression can match without using some of
its subexpressions at all---for example, when @samp{ba\(na\)*} matches the
string @samp{ba}, the parenthetical subexpression is not used.  When
this happens, @code{regexec} stores @code{-1} in both fields of the
element for that subexpression.

Sometimes matching the entire regular expression can match a particular
subexpression more than once---for example, when @samp{ba\(na\)*}
matches the string @samp{bananana}, the parenthetical subexpression
matches three times.  When this happens, @code{regexec} usually stores
the offsets of the last part of the string that matched the
subexpression.  In the case of @samp{bananana}, these offsets are
@code{6} and @code{8}.

But the last match is not always the one that is chosen.  It's more
accurate to say that the last @emph{opportunity} to match is the one
that takes precedence.  What this means is that when one subexpression
appears within another, then the results reported for the inner
subexpression reflect whatever happened on the last match of the outer
subexpression.  For an example, consider @samp{\(ba\(na\)*s \)*} matching
the string @samp{bananas bas }.  The last time the inner expression
actually matches is near the end of the first word.  But it is 
@emph{considered} again in the second word, and fails to match there.
@code{regexec} reports nonuse of the ``na'' subexpression.

Another place where this rule applies is when the regular expression
@w{@samp{\(ba\(na\)*s \|nefer\(ti\)* \)*}} matches @samp{bananas nefertiti}.
The ``na'' subexpression does match in the first word, but it doesn't
match in the second word because the other alternative is used there.
Once again, the second repetition of the outer subexpression overrides
the first, and within that second repetition, the ``na'' subexpression
is not used.  So @code{regexec} reports nonuse of the ``na''
subexpression.

@node Regexp Cleanup
@subsection POSIX Regexp Matching Cleanup

When you are finished using a compiled regular expression, you can
free the storage it uses by calling @code{regfree}.

@comment regex.h
@comment POSIX.2
@deftypefun void regfree (regex_t *@var{compiled})
Calling @code{regfree} frees all the storage that @code{*@var{compiled}}
points to.  This includes various internal fields of the @code{regex_t}
structure that aren't documented in this manual.

@code{regfree} does not free the object @code{*@var{compiled}} itself.
@end deftypefun

You should always free the space in a @code{regex_t} structure with
@code{regfree} before using the structure to compile another regular
expression.

When @code{regcomp} or @code{regexec} reports an error, you can use
the function @code{regerror} to turn it into an error message string.

@comment regex.h
@comment POSIX.2
@deftypefun size_t regerror (int @var{errcode}, regex_t *@var{compiled}, char *@var{buffer}, size_t @var{length})
This function produces an error message string for the error code
@var{errcode}, and stores the string in @var{length} bytes of memory
starting at @var{buffer}.  For the @var{compiled} argument, supply the
same compiled regular expression structure that @code{regcomp} or
@code{regexec} was working with when it got the error.  Alternatively,
you can supply @code{NULL} for @var{compiled}; you will still get a
meaningful error message, but it might not be as detailed.

If the error message can't fit in @var{length} bytes (including a
terminating null character), then @code{regerror} truncates it.
The string that @code{regerror} stores is always null-terminated
even if it has been truncated.

The return value of @code{regerror} is the minimum length needed to
store the entire error message.  If this is less than @var{length}, then
the error message was not truncated, and you can use it.  Otherwise, you
should call @code{regerror} again with a larger buffer.

Here is a function which uses @code{regerror}, but always dynamically
allocates a buffer for the error message:

@smallexample
char *get_regerror (int errcode, regex_t *compiled)
@{
  size_t length = regerror (errcode, compiled, NULL, 0);
  char *buffer = xmalloc (length);
  (void) regerror (errcode, compiled, buffer, length);
  return buffer;
@}
@end smallexample
@end deftypefun



@node    Performance Considerations, Semantic Tests, Posix Entry Points, Top
@section Performance Considerations
@cindex Performance Considerations


In order to use the Rx implementation of Posix regexp functions most
effectively, it may help to know a bit about performance tuning in Rx.


@menu
* Avoiding Redundant Compilations ::  Compiling Regexps is costly.
* Controlling Memory Use::      You can limit Rx's memory use.
@end menu

@node Avoiding Redundant Compilations , Controlling Memory Use, Performance Considerations, Performance Considerations
@subsection Avoiding Redundant Compilations

Rx implements the Posix regexp entry points @code{regcomp},
@code{regerror}, @code{regexec}, and @code{regfree}.   
Some special considerations apply when using the Rx versions.

First, @code{regcomp} is a comparatively expensive operation.
Addiitonally, @code{regexec} tends to perform better when a compiled
expression is compiled once and used twice than when the pattern is
compiled twice and used twice.  Internally, Rx caches that information
about a pattern which is constructed dynamicly by regexec.  You can save
on compilation costs and maximize the effectiveness of the Rx cache by
re-using compiled expressions when it is convenient.

For example, for reasons unrelated to Rx, it has long been the practice
in GNU emacs to always save one compiled regular expression (the most
recent).  Before compiling a new expression, Emacs checks to see if the
new pattern is the same as the one that is already compiled.  This is
the sort of optimization that Rx likes.  (It may even win, in some
cases, to cache more than a single compiled regexp.)

In the long-run, Rx should be modified to cache compilations on its own.
(@xref{Improvements to Make}.)

Sometimes programmers write programs with many regexps, all known
staticly at compile time.  This can be a problem with Rx because when
the program starts up, or as it runs, all of those staticly known
regexps have to be compiled, which may be too time consuming.

One easy fix for programs with many static regexps is to use @code{flex}
or another lexical-analyzer generator program instead.  Lexer-generators
are optimized for the case of compiling staticly known regexps.

There are still reasons why staticly known regexps may not be
convertable to @code{flex} input -- for example, the Posix pattern
language is more general than @code{flex}'s.  In the long-run, it may
be a good idea to extend Rx to support static compilation of regexps.
(@xref{Improvements to Make}.)

@node    Controlling Memory Use,  , Avoiding Redundant Compilations , Performance Considerations
@subsection Controlling Memory Use

The size of the cache used by regexec is subject to control by programmers.
Additionally, by using lower level entry points, programmers can create
multiple, distinct Rx caches.

This part of the code is subject to change and so is not yet documented.

See "default_cache" in rxsuper.c and the parameters at the top of
"rxbasic.c" to find some parameters you can tune or hints about creating
alternative regexec caches.

@node    Semantic Tests, General Functions, Performance Considerations, Top
@section Semantic Tests
@cindex Semantic tests

The distribution of @emph{Rx} includes a test-suite, aimed at
testing the conformance of an implementation of the Posix
regexp functions to the standard.

Currently, the tests come from two sources: a test-suite started by
Henry Spencer, and the "Khadafy" test suite by Scott Anderson.

The tests come in three files:

@itemize @bullet
@item runtests.c	-- The driver program.
@item TESTS		-- The list of test cases
@item TESTS2C.sed	-- A script to convert test cases into C.
@end itemize

@menu
* Running the Tests::           Invoking the test suite.
* Adding New Tests::            Extending the test suite.
@end menu

@node    Running the Tests, Adding New Tests, Semantic Tests, Semantic Tests
@subsection Running the Tests

To build the test program, use @code{make runtests}.  (Detailed
configuration and build instructions can be found in INSTALL).

Invoked with no arguments, @code{runtests} runs all test-cases.  For
each test case, a sequence number is printed.  If there is a problem
with that case, more information is printed.   Output like this:

@example
#0
#1
#2
...
@end example

indicates a successful run.   (The output format is likely to change
in the future to make it easier to automate testing of Rx.)

With a single numeric argument, runtests executes just that
test and no others.  This is handy when debugging.

Sometimes a bug will occur when all tests are run, but disappear when
just the problematic test is run.  Usually this has to do with memory
or cache corruption.

@node Adding New Tests,  , Running the Tests, Semantic Tests
@subsection Adding New Tests

This list of tests used by @code{runtests} is found in the file @code{TESTS}.
Each line of that file is a list of colon separated fields similar to:

@example
1:^(ab|cd)e:abcde
@end example

The first field is the expected return value of regexec, or '2' meaning
that the pattern is not valid.

The second field is the regular expression being tested.

The third field is the string to which the pattern is to be compared.

The file @code{TESTS2C.sed} is used to convert the test cases into
initializers for an array of structures (which is automated in the
Makefile).

To add a new test case, add lines to @code{TESTS} and recompile
@code{runtests}.


@node    General Functions, Rx Theory, Semantic Tests, Top
@section General Functions
@cindex Generalized entry points

Here is a whirlwind tour of the lower-level Rx entry points
and data structures.  This is not intended to be complete,
but rather to be a help to anyone reading the code itself.

These are presented in the same order in which they might typically be
used.


@menu
* Compiling Expressions::       Strings->Syntax Trees
* Posixly Correct Matches::     Checking for a Posixly correct match.
* Hairy Matches::               Matching with multi-part strings.
* NFA Functions::               Forget Posix, eat NFAs raw.
@end menu

@node Compiling Expressions, Posixly Correct Matches, General Functions, General Functions
@subsection Compiling Expressions

@deftypefn {Internal Function} reg_errcode_t rx_parse  (struct rexp_node ** rexp_p, __const__ char *pattern, int size, unsigned long syntax, int cset_size, unsigned char *translate);

Compile a regular expression.

@var{rexp_p} will return a syntax tree for the pattern.
See @code{"rxnode.h"} to learn about syntax trees.
Minimally, you should know that syntax trees are reference counted
using @code{rx_save_rexp} and @code{rx_free_rexp}.

@var{pattern} and @var{size} are the expression and 
its length.  The expression need not be 0-terminated.

The bits set in @var{syntax} control details of the language
understood by the parser.  The meaning of each bit
is described in @code{"rxgnucomp.h"}.

@var{cset_size} is usually 256.  It should not be much larger than that
or space-performance will suffer badly.

@var{translate} is a translation table -- an array of
characters. Characters in the pattern are looked up in @var{translate}
as they are read.  Additionally, the pattern is compiled presuming that
the same translation table will be applied to characters in the string
being searched (meaning that the pattern is compiled in such a way that
the effect will be as if every character in the target string is looked
up in the translation table, even though the expense of that lookup is
usually avoided).

A return of 0 indicates success, otherwise, the error can be 
looked up in the @code{rx_error_msg} array.
@end deftypefn


@deftypefn {Internal Function} int rx_posix_analyze_rexp (struct rexp_node *** subexps, int * n_subexps, struct rexp_node * node, int id)

Staticly analyze a regular expression in preparation for matching.

This function fills in some fields of the nodes of a syntax tree.  

@code{subexps} and @code{n_subexps} return a malloced array of pointers
into the syntax tree, one per parenthesized subexpression.  The caller
must eventually free this array.

@code{node} is the pattern to be analyzed.  The tree returned by
@code{rx_parse} is suitable for this.

@code{id} should be 1.  

Ignore the return value.

This function is not robust in the case that @code{malloc} or
@code{realloc} returns 0 (which should be fixed).
@end deftypefn

You might expect that @code{rx_posix_analyze_rexp} and @code{rx_parse}
should be combined.  They are not because the actions of
@code{rx_posix_analyze_rexp} make sense for any syntax tree, regardless
of how it is constructed.  @code{rx_parse} is just one way to build a
syntax tree -- it is subject to replacement and trees can be built
without using a parser at all (c.f. @code{"rxnode.h"}).

@node Posixly Correct Matches, Hairy Matches, Compiling Expressions, General Functions
@subsection Checking for Posixly Correct Matches with One-Piece Strings

Looking for a match that is Posixly correct is conceptually tricky.
Here is one way to think of it:

The Posix expression languages, absent of any consideration of the
meaning of "leftmost-longest", underspecify the return value of
@code{regexec}.  Consider the example:

@example
Pattern:
	foo\(.*\)\(.*\)bar
Target string:
	fooxxxbar
@end example

Initially it is ambiguous how this should be matched.  The ambiguity is
exposed by considering the possible bindings for the subexpressions
@code{\1} and @code{\2}:

@example
Possible outcomes:

	\1 == "xxx" \2 == ""
	\1 == "xx" \2 == "x"
	\1 == "x" \2 == "xx"
	\1 == "" \2 == "xxx"
@end example

Posix tells us that the first outcome is the prefered one if the
illustrated pattern is used alone (this is a consequence of the
"leftmost longest" rule).  But Posix also says the answer may be
different if the pattern is a sub-pattern of a larger pattern.  For
example:

@example
Pattern:
	foo\(.*\)\(.*\)bar\2
Target string:
	fooxxxbarxx
@end example

Now the only acceptable outcome is:

@example
	\1 == "x" \2 == "xx"
@end example

Three entry points provide a relatively simple interface to this
moderately complicated situation:


@deftypefn {Internal Function} {struct rx_solutions *} rx_basic_make_solutions (struct rx_registers * regs, struct rexp_node * expression, struct rexp_node ** subexps, int start, int end, struct rx_context_rules * rules, char * str)

@deftypefnx {Internal Function} void rx_basic_free_solutions (struct rx_solutions * solns);

@deftypefnx {Internal Function} {enum rx_answers} rx_next_solution (struct rx_solutions * solns)

@deftypefnx {Internal Function} void rx_basic_free_solutions (struct rx_solutions * solns)

@code{make_solutions} returns a lazilly constructed stream of possible
solutions for a given regexp and target string.  

@code{next_solution} constructs and returns the next solution from a
list returned by @code{make_solutions}.  Solutions are returned in order
of preferability according to the Posix spec.  So, the first solution is
the leftmost-longest, and the last, the rightmost-shortest.

@var{regs} is where subexpression extents are tracked.

@var{expression} is the expression to solve.

@var{subexps} is as returned by @code{rx_posix_analyze_rexp}.

@var{start} and @var{end} are the integer addresses of the data
to be compared to the pattern.  A solution must match all characters
starting at @var{start} and ending at @code{@var{end} - 1}.

@var{rules} are some bits that control the precise meaning of "^" and
"$".  See @code{"rxcontext.h"}.

@var{str} is the data to be matched.  Note that anchoring operators can
cause the matcher to look beyond @var{start} and @var{end} when testing
a match.  It may make sense to pass @var{start} > 0, for example.

@code{make_solutions} returns a pointer to a solution list, or 0 if an
allocation fails.

@code{next_solution} returns a status which can be:
@example
@code{rx_yes}	-- The pattern matches exactly.
@code{rx_maybe}	-- The pattern does not match, but might 
		   if more characters were added to the string.
@code{rx_no}	-- The pattern does not match and could not be
		   made to match even by adding more characters.
@end example

In addition, @var{regs} is filled in by @code{next_solution}.

Finally, @code{free_solutions} is used to release resources 
consumed by a solution list.
@end deftypefn


@node Hairy Matches, NFA Functions, Posixly Correct Matches, General Functions
@subsection Hairy Matches and Suspendable Searches


The functions @code{rx_basic_make_solutions} and
@code{rx_basic_free_solutions} are used to find matches in a one-piece
string.  More general entry points are provided for multi-piece strings,
which may or may not be entirely available in memory at one time:

@deftypefn {Internal Function} {struct rx_solutions *} rx_make_solutions (struct rx_registers * regs, struct rx_unfaniverse * verse, struct rexp_node * expression, struct rexp_node ** subexps, int cset_size, int start, int end, rx_vmfn vmfn, rx_contextfn contextfn, void * closure)

@deftypefnx {Internal Function} void rx_free_solutions (struct rx_solutions * solns)

These functions are similar to their @code{_basic_} analogues, but substitute
some new parameters for the one piece string:

@var{vmfn} is a function provided by the caller that returns at least
part of the string being matched.

@var{contextfn} is a function provided by the caller that does the work
of the backreference operators, "^", and "$".

@var{closure} is data provided by the caller, passed through to vmfn and
contextfn.

@example
typedef enum rx_answers (*rx_vmfn)
     P((void * closure,
	unsigned char ** burst, int * len, int * offset,
	int start, int end, int need));

typedef enum rx_answers (*rx_contextfn)
     P((void * closure,
	int type,
	int start, int end,
	struct rx_registers * regs));
@end example

@code{vmfn} is asked for a range of characters from @var{start} to
@var{end}.  @var{need} is in that range and is the only position that
must be returned by vmfn.  @var{burst}, @var{len}, and @var{offset} are
output parameters.  @var{offset} will get the integer address of burst,
and @var{len} the number of valid characters in the burst.  @var{vmfn}
may be asked for the empty string from @var{end} to @var{end} and should
be able to handle that case.

If @code{vmfn} provides the needed character, it should return
@code{rx_yes}.

If @code{vmfn} can't provide the character now, but might be able to
later, it should return @code{rx_maybe}.  This will cause @code{rx_next_solution}
to quickly return @code{rx_maybe}.   If @code{rx_next_solution} is
called again, it will retry the call to vmfn and possibly resume the
search.

If @code{vmfn} can not provide the needed character, it should return
@code{rx_no}.  @code{rx_next_solution} will not normally ask for
out-of-range characters, so usually there is no good reason to return
@code{rx_no}, but the code is supposed to be robust in case you do.

The @code{contextfn} also returns a @code{yes/no/maybe} status.  It
tests whether the characters in @var{start} to @var{end} satisfy the
operator @var{type}.  @code{type} is an ascii value; one of the
characters in "^$123456789".
@end deftypefn




@node NFA Functions,  , Hairy Matches, General Functions
@subsection NFA Functions and Super-NFA Functions

Not really documented yet.

@example
rx.h, rxnfa.h		-- translating an expression into an NFA.

rxsuper.h		-- optimizing the NFA into a DFA, or at least
			   an NFA with fewer branch points.

rxanal.h		-- how to use DFAs to find longest matches,
			   matches of a specific length, the shortest
			   match, etc.

rxsimp.h		-- Translating a Posix "regular
			   expression" into a true regular expression
			   that describes a superset language.
@end example

@node    Rx Theory, Improvements to Make, General Functions, Top
@section Rx Theory
@cindex Rx Theory

There are two match algorithms.  One is for truly regular regexps (those
that can be reduced to a dfa).  The other is for non-regular regexps.

The dfa algorithm implements the idea suggested in @cite{Compilers} by
Aho, Sethi and Ullman:

@quotation
[One] approach [to pattern matching regular expressions] is to use a
DFA, but avoid constructing all of the transition table by using a
technique called "lazy transition evaluation".  Here, transitions are
computed at run time [when] actually needed. [T]ransitions are
stored in a cache. [....] If the cache becomes full, we can erase some
previously computed transition to make room for the new transition.
@end quotation

The implementation in Rx is generalized from that, but the above
description covers what is used for Posix patterns. 

The non-dfa algorithm implements a "recursive decomposition" technique
described in email by Henry Spencer.  For a given pattern, this
algorithm first checks to see if a simpler, superset language,
DFA-pattern matches.  If it does, then this algorithm does the
detail-work to see if the non-DFA pattern matches.

The detail work usually involves recursing on subpatterns.  For example,
a concatentation of two subexpressions matches a string if the string
can be divided into two parts, each matching one subexpression, in the
right order.  More than one solution is often possible for a given
pattern.  This ambiguity is the subject of the "leftmost longest" rules
in the spec, and the back-tracking oriented stream-of-solution functions
@code{rx_make_solutions}, @code{rx_next_solution} and
@code{rx_free_solutions}.

@example
rxspencer.[ch]	 			-- The non-DFA algorithm
rxanal.[ch] rxsuper.[ch] rxnfa.[ch]	-- The DFA algorithm
@end example



@node    Improvements to Make,  , Rx Theory, Top
@section Improvements to Make
@cindex Improvements to make

An approximation of the GNU entry points is needed.  This can not easily
be an exact approximation because the GNU entry points have no function
for freeing a compiled expression -- they assume that compiled
expressions can be freed using a single call to "free(3)".  For that
reason, do not use the names of the old GNU entry points ...use "rx_"
instead.

This version of Rx hasn't been profiled and tuned.

It might be nice to have some C++ types to hide reference counting and
provide handy constructors for rexp_nodes and nfa parts.

Right now, the regexp->regular regexp mapping in rxsimp.[ch] is cached
for a particular input expression.  I think it would probably be a big
win in many situations if it were cached, like unique nfas
(c.f. rxunfa.[ch]), for equivalent expressions.

It would speed up matching to lift the non-regular constructs to the 
top of the syntax tree.   e.g., if you have:

@example
pattern:  "abc$"

syntax tree: (concat (cset "a")
	             (concat (cset "b")
			     (concat (cset "c")
				     (operator "$"))))
@end example

it involves a lot more work (in "next_solution) than if you have the
equivalent:

@example
same pattern:  "abc$"

syntax tree: (concat (concat (cset "a")
			     (concat (cset "b")
				     (cset "c")))
		     (operator "$"))
@end example


in fact, while doing that, notice that subtrees of nothing-but-concat
can conceivably be optimized so that next_solution just uses "strcmp".

For that matter, a tree which is a disjunction of conjunction (a tree of
"|" whose leaves are trees of concat nodes) could be optimized to use a
table method (Boyer/Moore?).  Again, this would be for next_solution but
might involve adding stuff to rx_posix_analyze_rexp.

As more and more optimizations are added, programmers should be given
simple control over which optimizations are important for a particular
pattern.  For example, packages in emacs often include a few regexps
that are used heavily -- it would be worth the trouble to arrange for
those regexps to be compiled specially.

Static compilation of regexps is mostly a job for lex, but posix
patterns are more general and have a nicer interface.  What's more, it'd
be nice to have the benefits of static compilation even for dynamicly
loaded regexps (e.g., imagine if when an emacs lisp file is
byte-compiled, the regexps it contains are also compiled).

A lot of optimizations apply to just syntax trees.  One approach to
static compilation is to make an ugly but fast-reading syntax for trees,
and a printer for that syntax.  Then, after optimiztaions, a pattern
could be stored as a string and later read back in, already optimized.

A similar trick could be done for the nfa built in rxnfa.c.

next_solution already considers the length of a fixed-length
subexpression, but many more lenght optimizations are possible.  I'd
guess these will pay off well.

@cindex TODO

